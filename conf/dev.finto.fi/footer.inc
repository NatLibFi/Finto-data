<!-- Cookie Consent -->
<link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.0.3/cookieconsent.min.css" />
<script src="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.0.3/cookieconsent.min.js"></script>

<script>

{% if request.lang == 'fi' %}
cookieMessage = "Finto.fi-sivusto käyttää evästeitä käyttäjän kieliasetusten muistamiseen sekä käytön tilastointiin. Käyttämällä Finto.fi-sivustoa hyväksyt evästeiden käytön.";
cookieDismiss = "Selvä!";
cookieLink = "Lue lisää";
cookieHref = "https://www.kiwi.fi/x/2zOOBQ";
{% elseif request.lang == 'sv' %}
cookieMessage = "Finto.fi-sidan använder cookies för att komma ihåg användares språkinställningar och för användningsstatistik. Genom att använda Finto.fi-sidan godkänner du användningen av cookies.";
cookieDismiss = "Klart!";
cookieLink = "Läs mer";
cookieHref = "https://www.kiwi.fi/x/3jOOBQ";
{% elseif request.lang == 'en' %}
cookieMessage = "Finto.fi uses cookies to store language preferences and compile usage statistics. By using finto.fi you accept the use of cookies.";
cookieDismiss = "Got it!";
cookieLink = "Learn more";
cookieHref = "https://www.kiwi.fi/x/4DOOBQ";
{% elseif request.lang == 'se' %} 
cookieMessage = " Finto.fi-siidu geavaha gáhkožiid geavaheaddjiid giellaválljemiid muitima ja geavahanstatistihkaid várás. Go geavahat Finto.fi-siiddu, dohkkehat gáhkožiid geavaheami."; 
cookieDismiss = "Čielggas!"; 
cookieLink = "Loga lasi"; 
cookieHref = "https://www.kiwi.fi/x/2zOOBQ"; 
{% endif %}

window.addEventListener("load", function(){
window.cookieconsent.initialise({
  "palette": {
    "popup": {
      "background": "#d4edeb",
      "text": "#333333"
    },
    "button": {
      "background": "#394554",
      "text": "#ffffff"
    }
  },
  "theme": "edgeless",
  "content": {
    "message": cookieMessage,
    "dismiss": cookieDismiss,
    "link": cookieLink,
    "href": cookieHref
  }
})});
</script>
<!-- End Cookie consent -->

<script type="text/javascript">
function createConceptObject(conceptUri, conceptData) {
  var newNode = { 
    text: getLabel(conceptData), 
    label: pickLabel(conceptData),
    a_attr: getHrefForUri(conceptData.uri),
    uri: conceptUri,
    notation: conceptData.notation,
    parents: conceptData.broader,
    state: { opened: true },
    children: []
  };
  // adding a css class for separating the yso concepts from the special domain ontology concepts
  if (vocab !== 'yso' && newNode.uri.indexOf('www.yso.fi/onto/yso/') !== -1)
    newNode.a_attr['class'] = 'yso-concept';
  if (vocab === 'mtswemi' && newNode.uri.indexOf('http://urn.fi/URN:NBN:fi:au:mts:rda_') !== -1)
    newNode.a_attr['class'] = 'replaced';
  // setting the flag manually if the concept is known to have narrowers, but they aren't included eg. included topconcepts
  if(conceptData.hasChildren === true) {
    newNode.children = true;
    newNode.state.opened = false;
  }
  // if we are at a concept page we want to highlight that node and mark it as to be initially opened.
  if (newNode.uri === window.uri) { newNode.li_attr = { class: 'jstree-leaf-proper' }; }
  if (conceptData.narrower) { // filtering out the ones that don't have labels 
    newNode.children = createObjectsFromChildren(conceptData, conceptUri);
  }
  
  return newNode;
}

// begin mtswemi related changes block (all changes to this exact file in this commit to be reverted later on)
function invokeGroupTree() {
  var $treeObject = $('.group-hierarchy');
  $treeObject.on('activate_node.jstree', function(event, node) {
    $treeObject.jstree('open_node', node.node);
  });

  $treeObject.jstree({
    'plugins' : ['sort'],
    'sort' : function (a,b) { return naturalCompare(this.get_text(a).toLowerCase(), this.get_text(b).toLowerCase()); },
    'core' : { 
      'data' : 
        function(node, cb) { 
          var json_url = (node.id !== '#') ? (rest_base_url + vocab + '/groupMembers') : (rest_base_url + vocab + '/groups');
          var params = (node.id !== '#') ? $.param({'uri' : node.a_attr['data-uri'], 'lang' : content_lang}): $.param({'lang' : content_lang});
          $.ajax({
            data: params,
            url: json_url, 
            req_kind: $.ajaxQ.requestKind.SIDEBAR_PRIVILEGED,
            success: function (response) {
              if (response.groups) { // the default hierarchy query that fires when a page loads.
                return cb(buildGroupTree(response.groups));
              } else {
                var children = [];
                for (var i in response.members) {
                  var member = response.members[i];
                  var child = {'text' : member.prefLabel,'parent' : node.a_attr['data-uri'], children : false, a_attr : { 'data-uri' : member.uri, "href" : getHrefForUri(member.uri, true) }};

  if (vocab === 'mtswemi' && child.a_attr['data-uri'].indexOf('http://urn.fi/URN:NBN:fi:au:mts:rda_') !== -1)
    child.a_attr['class'] = 'replaced';
                  if (member.hasMembers || member.isSuper) {
                    child.children = true;
                  }
                  if (showNotation && member.notation) {
                    child.text = '<span class="tree-notation">' + member.notation + '</span> ' + child.text;
                  }
                  children.push(JSON.parse(JSON.stringify(child)));
                }
                return cb(JSON.parse(JSON.stringify(children)));
              }
            }
          });
      },
      'animation' : 0,
      'themes' : { 'icons': false },
      'strings' : { 'Loading ...' : jstree_loading }
    } 
  });
}

function createGroupNode(uri, groupObject) {
  var node = {children : [], a_attr : {'data-uri' : uri, "href" : getHrefForUri(uri, true), "class" : "group" }};
  node.text = groupObject.prefLabel;
  if (groupObject.hasMembers || groupObject.isSuper)
    node.children = true;
  if (vocab === 'mtswemi' && groupObject.uri.indexOf('http://urn.fi/URN:NBN:fi:au:mts:rda_') !== -1)
    groupObject.a_attr['class'] = 'replaced';
  if (showNotation && groupObject.notation)
    node.text = '<span class="tree-notation">' + groupObject.notation + '</span> ' + node.text;
  return node;
}

function buildGroupTree(response) {
  var data = [];
  var groups = {};
  for (var i in response) {
    var group = createGroupNode(response[i].uri, response[i]); 
    groups[response[i].uri] = group;
    if (response[i].uri === $('.uri-input-box').html()) {
      group.state = { 'opened' : true };
      group.a_attr.class = "jstree-clicked group";
    }
  }
  // adding children to the groups
  for (var i in response) {
    var groupobj = groups[response[i].uri];
    for (var j in response[i].childGroups) {
      var childuri = response[i].childGroups[j];
      if (groups[childuri]) {
        var childobj = groups[childuri];
        if (groupobj.children === true)
          groupobj.children = [];
        groupobj.children.push(childobj);
        if (childobj.state)
          groupobj.state = childobj.state;
        childobj.is_child = true;
      }
    }
  }
  for (var uri in groups) {
    var groupObj = groups[uri];
    if (!groupObj.is_child) {
      fixStates(groupObj);
      data.push(groupObj);
    }
  }
  return JSON.parse(JSON.stringify(data));
}

function fixStates(groupobj) {
  for (var i in groupobj.children) {
    fixStates(groupobj.children[i]);
    if (groupobj.children[i].state) {
      groupobj.state = groupobj.children[i].state;
    }
  }
}
// end mtswemi related changes block
function createObjectsFromChildren(conceptData, conceptUri) {
  var childArray = [];
  for (var i = 0; i < conceptData.narrower.length; i++) {
    var childObject = {
      text: getLabel(conceptData.narrower[i]), 
      label: pickLabel(conceptData.narrower[i]),
      a_attr: getHrefForUri(conceptData.narrower[i].uri),
      uri: conceptData.narrower[i].uri,
      notation: conceptData.narrower[i].notation,
      parents: conceptUri,
      state: { opened: true }
    };
    if (vocab !== 'yso' && childObject.uri.indexOf('www.yso.fi/onto/yso/') !== -1)
      childObject.a_attr['class'] = 'yso-concept';
  if (vocab === 'mtswemi' && childObject.uri.indexOf('http://urn.fi/URN:NBN:fi:au:mts:rda_') !== -1)
    childObject.a_attr['class'] = 'replaced';
    // if the childConcept hasn't got any children the state is not needed.
    if (conceptData.narrower[i].hasChildren) {
      childObject.children = true;
      childObject.state.opened = false;
    }
    if(!childArray[childObject.uri])
      childArray.push(childObject);
    storeUri(childObject);
  }
  return childArray;
}


function vocabRoot(topConcepts) {
  var topArray = [];
  for (var i = 0; i < topConcepts.length; i++) {
    var conceptData = topConcepts[i];
    var childObject = {
      text: getLabel(conceptData),
      label: pickLabel(conceptData),
      a_attr : getHrefForUri(conceptData.uri),
      uri: conceptData.uri,
      notation: conceptData.notation,
      state: { opened: false } 
    };
    if (vocab !== 'yso' && childObject.uri.indexOf('www.yso.fi/onto/yso/') !== -1)
      childObject.a_attr['class'] = 'yso-concept';
  if (vocab === 'mtswemi' && childObject.uri.indexOf('http://urn.fi/URN:NBN:fi:au:mts:rda_') !== -1)
    childObject.a_attr['class'] = 'replaced';
    if (conceptData.hasChildren)
      childObject.children = true;
    setNode(childObject);
    topArray.push(childObject);
  }
  return topArray;
}

function createObjectsFromNarrowers(narrowerResponse) {
  var childArray = [];
  for (var i = 0; i < narrowerResponse.narrower.length; i++) {
    var conceptObject = narrowerResponse.narrower[i];
    var childObject = {
      text: getLabel(conceptObject),
      label: pickLabel(conceptObject),
      a_attr: getHrefForUri(conceptObject.uri),
      uri: conceptObject.uri,
      notation: conceptObject.notation,
      parents: narrowerResponse.uri,
      state: { opened: false, disabled: false, selected: false }
    };
    if (vocab !== 'yso' && childObject.uri.indexOf('www.yso.fi/onto/yso/') !== -1)
      childObject.a_attr['class'] = 'yso-concept';
  if (vocab === 'mtswemi' && childObject.uri.indexOf('http://urn.fi/URN:NBN:fi:au:mts:rda_') !== -1)
    childObject.a_attr['class'] = 'replaced';
    childObject.children = conceptObject.hasChildren ? true : false;
    setNode(childObject);
    childArray.push(childObject);
  }
  return childArray;
}
</script>

<!-- KANTO/finaf tweaks -->
<script type="text/javascript">

function finaf_tweak() {
    $(".prop-rdaa_P50094 li:not(.finaf-adjusted), .prop-rdaa_P50006 li:not(.finaf-adjusted)").each(function(index) {
        $(this).addClass("finaf-adjusted"); // prevent infinity loop
        $(this).find('> span').each(function(sIndex) {
            if (this.textContent.startsWith("Asteri ID:")) {
                var asteriSpan = $("<span id='finaf-adjusted-" + index + "s" + sIndex + "'>" + this.textContent.substr(11) + "</span>");
                $(this).text("Asteri ID: ");
                var copyObject = $("#uri-input-box + button.copy-clipboard").clone(true);
                copyObject.attr("for", "#finaf-adjusted-" + index + "s" + sIndex).css("margin-left", "4px");
                $(this).after(copyObject).after(asteriSpan);
            }
            if (this.textContent.startsWith("Y-tunnus:")) {
                var yTunnusSpan = $("<span id='finaf-adjusted-" + index + "s" + sIndex + "'>" + this.textContent.substr(10) + "</span>");
                $(this).text("Y-tunnus: ");
                var copyObject = $("#uri-input-box + button.copy-clipboard").clone(true);
                copyObject.attr("for", "#finaf-adjusted-" + index + "s" + sIndex).css("margin-left", "4px");
                $(this).after(copyObject).after(yTunnusSpan);
            }
        });
        $(this).find('a').each(function(aIndex) {
            var href = $(this).attr('href');
            if (href.startsWith('http:\/\/isni.org/isni/')) {
                $("<span>ISNI: </span>").insertBefore($(this));
                isni = href.replace('http:\/\/isni.org/isni/', '');
                $(this).empty();
                for (var i = 0; i <= 12; i = i + 4) {
                    $(this).append("<span class='isni-digit-block'>" + isni.substr(i, 4) + "</span>");
                }
                $(this).attr("id", "finaf-adjusted-" + index + "a" + aIndex);
                var copyObject = $("#uri-input-box + button.copy-clipboard").clone(true);
                copyObject.attr("for", "#finaf-adjusted-" + index + "a" + aIndex).css("margin-left", "4px");
                $(this).after(copyObject);
            }
            if (href.startsWith('https:\/\/orcid.org/')) {
                $('<span class="orcid">ORCID:</span>').insertBefore($(this));
                orcid = href.replace('https:\/\/orcid.org/', '');
                $(this).text(orcid);
                $(this).attr("id", "finaf-adjusted-" + index + "a" + aIndex);
                var copyObject = $("#uri-input-box + button.copy-clipboard").clone(true);
                copyObject.attr("for", "#finaf-adjusted-" + index + "a" + aIndex).css("margin-left", "4px");
                $(this).after(copyObject);
            }
            if (href.startsWith('http:\/\/viaf.org/viaf/')) {
                $('<span>VIAF ID: </span>').insertBefore($(this));
                viaf = href.replace('http:\/\/viaf.org/viaf/', '');
                $(this).text(viaf);
                $(this).attr("id", "finaf-adjusted-" + index + "a" + aIndex);
                var copyObject = $("#uri-input-box + button.copy-clipboard").clone(true);
                copyObject.attr("for", "#finaf-adjusted-" + index + "a" + aIndex).css("margin-left", "4px");
                $(this).after(copyObject);
            }
        });
    });
}

$( document ).ready(function() {
    if (vocab === "finaf") {
        finaf_tweak(); // do immediately
        const mainContentNode = document.getElementById("maincontent");
        const observer = new MutationObserver(finaf_tweak);
        observer.observe(mainContentNode, {childList: true, subtree: true});
    }
});
</script>
